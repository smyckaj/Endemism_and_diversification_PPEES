#prepare data
############################
setwd("~/Dropbox/Diversification of Alpine flora/Endemics spatial multitree/ML species trees")
library(ape)
library(parallel)
files=list.files()
trees=list()
for (i in 1:length(files)){
tr=read.tree(files[i])
trees[[i]]=tr
}
setwd("~/Dropbox/Diversification of Alpine flora/Endemics spatial multitree")
##getting distribution of mntd
#load data
data=read.csv("data.csv")
row.names(data)=data$X
data=data[,-1]
spdata=read.csv("spdata.csv")
#angiosperms only
m=match(c("Lycopodium_clavatum",
"Diphasiastrum_alpinum",
"Diphasiastrum_oellgaardii",
"Huperzia_selago",
"Isoetes_echinospora",
"Selaginella_selaginoides",
"Pinus_cembra",
"Pinus_mugo",
"Larix_decidua",
"Juniperus_communis",
"Juniperus_sabina",
"Botrychium_simplex",
"Equisetum_arvense",
"Cryptogramma_crispa",
"Asplenium_fissum",
"Asplenium_viride",
"Cystopteris_alpina",
"Cystopteris_montana",
"Woodsia_alpina",
"Woodsia_pulchella",
"Athyrium_distentifolium",
"Polystichum_lonchitis",
"Dryopteris_villarii"),names(data))
data=data[,-m]
angonly=function(tree){
tree=drop.tip(tree,c("Lycopodium_clavatum",
"Diphasiastrum_alpinum",
"Diphasiastrum_oellgaardii",
"Huperzia_selago",
"Isoetes_echinospora",
"Selaginella_selaginoides",
"Pinus_cembra",
"Pinus_mugo",
"Larix_decidua",
"Juniperus_communis",
"Juniperus_sabina",
"Botrychium_simplex",
"Equisetum_arvense",
"Cryptogramma_crispa",
"Asplenium_fissum",
"Asplenium_viride",
"Cystopteris_alpina",
"Cystopteris_montana",
"Woodsia_alpina",
"Woodsia_pulchella",
"Athyrium_distentifolium",
"Polystichum_lonchitis",
"Dryopteris_villarii"))
}
mltree=angonly(mltree)
trees=mclapply(trees,angonly,mc.cores = 10)
library(PhyloMeasures)
mntds=function(tree){
datareshuf=data[ ,match(tree$tip.label,names(data))]
mntd=mntd.query(tree,datareshuf,is.standardised = TRUE)
mntd
}
mntds=mclapply(trees,mntds,mc.cores = 10)
mntdsar=simplify2array(mntds)
library(R2jags)
anal.data=list(Nplot=386,
Ntree=1000,
mntd=mntdsar*1000,
minalt=spdata$minalt,
meanalt=spdata$meanalt,
rangealt=spdata$range,
caref=spdata$caref,
siref=spdata$siref)
model.angio=jags.parallel(data=anal.data,
model.file="ibd.bug",
parameters.to.save=c("intercept","minaltcoef", "meanaltcoef", "rangealtcoef","carefcoef","sirefcoef","resid"),
n.chains=5,
n.iter=2000,
n.burnin=1500)
model.angio=jags.parallel(data=anal.data,
model.file="ibd.bug",
parameters.to.save=c("intercept","minaltcoef", "meanaltcoef", "rangealtcoef","carefcoef","sirefcoef"),
n.chains=5,
n.iter=2000,
n.burnin=1500)
plot(as.mcmc(model.angio))
model.angio=jags.parallel(data=anal.data,
model.file="ibd.bug",
parameters.to.save=c("intercept","minaltcoef", "meanaltcoef", "rangealtcoef","carefcoef","sirefcoef"),
n.chains=5,
n.iter=2000,
n.burnin=1500)
plot(as.mcmc(model.angio))
model.angio=jags.parallel(data=anal.data,
model.file="ibd.bug",
parameters.to.save=c("intercept","minaltcoef", "meanaltcoef", "rangealtcoef","carefcoef","sirefcoef"),
n.chains=5,
n.iter=2000,
n.burnin=1500)
plot(as.mcmc(model.angio))
model.angio=jags.parallel(data=anal.data,
model.file="ibd.bug",
parameters.to.save=c("intercept","minaltcoef", "meanaltcoef", "rangealtcoef","carefcoef","sirefcoef"),
n.chains=5,
n.iter=2000,
n.burnin=1500)
plot(as.mcmc(model.angio))
modelendspat
model.endspat
summary(model.endspat)
model.endspat$BUGSoutput$summary
model.endspat$BUGSoutput$summary[7:368+7,1]
model.endspat$BUGSoutput$summary[7:386+7,1]
model.endspat$BUGSoutput$summary[7:(386+7),1]
model.endspat$BUGSoutput$summary[8:(386+7),1]
r=model.endspat$BUGSoutput$summary[8:(386+7),1]
spdata=read.csv("spdata.csv")
plot(spdata$LON,spdata$LAT,cex=r)
plot(spdata$LON,spdata$LAT,cex=r+100/)
plot(spdata$LON,spdata$LAT,cex=r/100+1)
plot(spdata$LON,spdata$LAT,cex=r/100+1)
plot(spdata$LON,spdata$LAT,cex=r/10+1)
load("/home/smyckaj/Desktop/Link to Dropbox/Diversification of Alpine flora/Endemics spatial multitree/spat.RData")
r=model.angiospat$BUGSoutput$summary[8:(386+7),1]
r
plot(spdata$LON,spdata$LAT,cex=r/10+1)
plot(spdata$LON,spdata$LAT,cex=r/100+1)
plot(spdata$LON,spdata$LAT,cex=r/1000+1)
plot(spdata$LON,spdata$LAT,cex=r/500+1)
load("/home/smyckaj/Desktop/Link to Dropbox/Diversification of Alpine flora/Endemics spatial multitree/rarfiltspat.RData")
model.rarfiltspat$BUGSoutput$summary[8:(386+7),1]
model.rarfiltspat$BUGSoutput$summary[,1]
model.rarfiltspat$BUGSoutput$summary[7:(7+358),1]
model.rarfiltspat$BUGSoutput$summary[8:(7+358),1]
r=model.rarfiltspat$BUGSoutput$summary[8:(7+358),1]
spdatafilt=spdata[-which(is.na(spdata$rar)),]
plot(spdatafilt$LON,spdatafilt$LAT,cex=r/500+1)
plot(spdatafilt$LON,spdatafilt$LAT,cex=r/10+1)
plot(spdatafilt$LON,spdatafilt$LAT,cex=spdatafilt$rar/10+1)
plot(spdatafilt$LON,spdatafilt$LAT,cex=spdatafilt$rar+1)
plot(spdatafilt$LON,spdatafilt$LAT,cex=spdatafilt$rar)
plot(spdatafilt$LON,spdatafilt$LAT,cex=spdatafilt$rar*100)
library(R2jags)
spdata=read.csv("spdata.csv")
plot(ssmntda~meanalt)
plot(ssmntda~meanalt,data=spdata)
model.angiospat$BUGSoutput$summary
model.angiospat$BUGSoutput$summary[5,1]
abline(model.angiospat$BUGSoutput$summary[1,1],model.angiospat$BUGSoutput$summary[5,1])
abline(model.angiospat$BUGSoutput$summary[5,1],model.angiospat$BUGSoutput$summary[1,1])
abline(model.angiospat$BUGSoutput$summary[3,1],model.angiospat$BUGSoutput$summary[5,1])
model.angiospat$BUGSoutput$summary[3,1]
abline(model.angiospat$BUGSoutput$summary[3,1]/1000,model.angiospat$BUGSoutput$summary[5,1]/1000)
abline(lm(ssmntda~meanalt,spdata),col="red")
abline(model.angiospat$BUGSoutput$summary[3,1]/1000,(model.angiospat$BUGSoutput$summary[5,1]+model.angiospat$BUGSoutput$summary[6,1]+model.angiospat$BUGSoutput$summary[7,1])/1000)
abline(model.angiospat$BUGSoutput$summary[3,1]/1000,mean(model.angiospat$BUGSoutput$summary[5,1]+model.angiospat$BUGSoutput$summary[6,1]+model.angiospat$BUGSoutput$summary[7,1])/1000)
plot(ssmntda~meanalt,data=spdata)
abline(model.angiospat$BUGSoutput$summary[3,1]/1000,model.angiospat$BUGSoutput$summary[5,1]/1000)
plot(ssmntda~meanalt,data=spdata,xlab="Mean altitude",ylab="ses.MNTD")
abline(model.angiospat$BUGSoutput$summary[3,1]/1000,model.angiospat$BUGSoutput$summary[5,1]/1000)
points(meanalt[which(caref==1)],ssmntda[which(caref==1)],col="blue")
points(meanalt[which(caref==1)],ssmntda[which(caref==1)],col="blue",data=spdata)
points(meanalt[which(spdata$caref==1)],ssmntda[which(spdata$caref==1)],col="blue",data=spdata)
points(spdata$meanalt[which(spdata$caref==1)],spdata$ssmntda[which(spdata$caref==1)],col="blue")
abline((model.angiospat$BUGSoutput$summary[3,1]+model.angiospat$BUGSoutput$summary[1,1])/1000,model.angiospat$BUGSoutput$summary[5,1]/1000, col="blue")
plot(ssmntda~meanalt,data=spdata,xlab="Mean altitude",ylab="ses.MNTD",pch=20)
abline(model.angiospat$BUGSoutput$summary[3,1]/1000,model.angiospat$BUGSoutput$summary[5,1]/1000)
abline((model.angiospat$BUGSoutput$summary[3,1]+model.angiospat$BUGSoutput$summary[1,1])/1000,model.angiospat$BUGSoutput$summary[5,1]/1000, col="blue")
points(spdata$meanalt[which(spdata$caref==1)],spdata$ssmntda[which(spdata$caref==1)],col="blue",pch=20)
model.angiospat$BUGSoutput$summary[,1]
length(model.angiospat$BUGSoutput$summary[,1])
abline((model.angiospat$BUGSoutput$summary[3,1]+model.angiospat$BUGSoutput$summary[394,1])/1000,model.angiospat$BUGSoutput$summary[5,1]/1000, col="blue")
plot(ssmntda~meanalt,data=spdata,xlab="Mean altitude",ylab="ses.MNTD",pch=20)
abline(model.angiospat$BUGSoutput$summary[3,1]/1000,model.angiospat$BUGSoutput$summary[5,1]/1000)
abline((model.angiospat$BUGSoutput$summary[3,1]+model.angiospat$BUGSoutput$summary[1,1])/1000,model.angiospat$BUGSoutput$summary[5,1]/1000, col="blue")
points(spdata$meanalt[which(spdata$caref==1)],spdata$ssmntda[which(spdata$caref==1)],col="blue",pch=*)
points(spdata$meanalt[which(spdata$caref==1)],spdata$ssmntda[which(spdata$caref==1)],col="blue",pch="*")
plot(ssmntda~meanalt,data=spdata,xlab="Mean altitude",ylab="ses.MNTD",cex= 0.5)
abline(model.angiospat$BUGSoutput$summary[3,1]/1000,model.angiospat$BUGSoutput$summary[5,1]/1000)
abline((model.angiospat$BUGSoutput$summary[3,1]+model.angiospat$BUGSoutput$summary[1,1])/1000,model.angiospat$BUGSoutput$summary[5,1]/1000, col="blue")
points(spdata$meanalt[which(spdata$caref==1)],spdata$ssmntda[which(spdata$caref==1)],col="blue",pch=19,cex=0.5)
abline((model.angiospat$BUGSoutput$summary[3,1]+model.angiospat$BUGSoutput$summary[394,1])/1000,model.angiospat$BUGSoutput$summary[5,1]/1000, col="red")
points(spdata$meanalt[which(spdata$siref==1)],spdata$ssmntda[which(spdata$siref==1)],col="red",pch=19,cex=0.5)
points(spdata$meanalt[which(spdata$siref==1 & spdata$caref==1)],spdata$ssmntda[whichspdata$siref==1 & spdata$caref==1)],col="purple",pch=19,cex=0.5)
points(spdata$meanalt[which(spdata$siref==1 & spdata$caref==1)],spdata$ssmntda[which(spdata$siref==1 & spdata$caref==1)],col="purple",pch=19,cex=0.5)
setwd("~/Dropbox/Diversification of Alpine flora/Endemics spatial multitree")
library(ape)
matchtable=read.delim("matchtable.csv")
library(adephylo)
stickTips=function(tree, tab , prun=T, subtree.type = "polytomy", b=0.01, d=0, p=0.3, comments=TRUE){
if(!require(ape)) {stop("library ape is needed!\n")}
if(!require(adephylo)) {stop("library adephylo is needed!\n")}
library(ape)
library(adephylo)
tab[,1] <- as.character(tab[,1])
tab[,2] <- as.character(tab[,2])
nochanges <- which(tab[,1]==tab[,2])
if( sum(duplicated(c(unique(tab[-nochanges,1]), unique(tab[-nochanges,2])))) != 0 ) {stop("two tips have the same name!\n")}   # this will avoid the creation of a weird object
#select table names that are not in the tips
outers.tab <- unique(tab[!(tab[,2] %in% tree$tip.label),2])
#warning for these names and removing of the matching lines
if (length(outers.tab)!=0) { warning(paste(outers.tab,"is/are not in the tips of your tree !\n"),call.=FALSE)
tab <- tab[- which((tab[,2] %in% outers.tab)),]
}
#select tips names that are not in the table
outers.tree <- unique(tree$tip.label[!(tree$tip.label %in% tab[,2])])
#warning if the tree contains more names than the table
if (length(outers.tree)!=0) { if(comments==TRUE) warning(paste(outers.tree,"is/are not in your tab !\n"),call.=FALSE)    }
# sticking
for(tip in as.character(unique(tab[,2]))){ #each tip
toStick <- tab[tab[,2]==tip,1]  #new tips list
if(comments==TRUE) print(paste("sticking to : ",as.character(tip)))
#if there is no element, we do nothing (case only if prun=F)
#substitution if only 1 element
if(length(toStick)==1) tree$tip.label[tree$tip.label==tip] <- as.character(toStick[1])
#if several elements
if(length(toStick)>1) {
# depth of the branch:
depth <- tree$edge.length[which.edge(tree,which(tree$tip.label==tip))]
if(subtree.type == "polytomy"){
#shorten the receiver branch
tree$edge.length[which.edge(tree,which(tree$tip.label==tip))] = depth/2
#make the polytomic tree to stick
polytomy <-  as.phylo(~newTip, data=data.frame(newTip=toStick))
subtree = compute.brlen(polytomy,depth/2)
}else {
if(subtree.type=="brownian"){
if(!require(geiger)) {stop("library geiger is needed!\n")}
library(geiger)
# subtree
subtree <- treedata(birthdeath.tree(b, d, taxa.stop=(length(toStick) + 1)), data.frame(rnorm(length(toStick))), warnings=FALSE)$phy
# create tmp to get root length
tmp <- treedata(birthdeath.tree(b, d, taxa.stop=4), data.frame(rnorm(3)), warnings=FALSE)$phy
root.tmp <- which(tmp$edge[,2] == 5)
# shorten the receiver branch
# old: receiv.brlen <- mean(subtree$edge.length) * depth/max(distRoot(subtree))
receiv.brlen <- tmp$edge.length[root.tmp] * depth/(max(distRoot(subtree)) + tmp$edge.length[root.tmp])
}else{
if(!require(apTreeshape)) {stop("library apTreeshape is needed!\n")}
library(apTreeshape)
#make the tree to stick
subtree <- as.phylo(rtreeshape(1, tip.number = length(toStick), model=subtree.type, p=p)[[1]])
#shorten the receiver branch
receiv.brlen <- depth/max(distRoot(subtree))
}
#shorten the receiver branch
tree$edge.length[which.edge(tree,which(tree$tip.label==tip))]  <- receiv.brlen
#rescale new branch length
subtree$edge.length <- subtree$edge.length*(depth-receiv.brlen)/max(distRoot(subtree))
# tips names
subtree$tip.label <- toStick
}
#stick the subtree
tree <- bind.tree(tree,subtree, which(tree$tip.label==tip))
}
}
#remove tips that are not in the table
if (prun == TRUE & length(outers.tree)!=0) tree <- drop.tip(tree,outers.tree)
return(tree)
}
setwd("~/Dropbox/Diversification of Alpine flora/Endemics spatial multitree/ML genera trees")
tr=read.tree("Alps_eudicots_fixed125_chrono_genuscomplete1.tre")
which(tr$edge.length==0)
tr=extract.clade(tr,findMRCA(tr,c("Anemone","Aconitum")))
library(ape)
library(adephylo)
library(phytools)
setwd("~/Dropbox/Diversification of Alpine flora/Endemics spatial multitree/ML genera trees")
tr=read.tree("Alps_eudicots_fixed125_chrono_genuscomplete1.tre")
tr=extract.clade(tr,findMRCA(tr,c("Anemone","Aconitum")))
plot(tr)
tab=data.frame(matchtable$treefri,matchtable$generaftrefri)
trst=stickTips(tr,tab,model="yule")
trst=stickTips(tr,tab,subtree.type="yule")
plot(trst)
trst=stickTips(tr,tab,subtree.type="pda")
plot(trst)
plot(trst)
trst=stickTips(tr,tab,subtree.type="pda")
trst=stickTips(tr,tab,subtree.type="polytomy")
trst=stickTips(tr,tab,subtree.type="pda")
trst=stickTips(tr,tab,subtree.type="yule")
View(tab)
tab=tab[match(tr$tip.label,matchtable$generatrefri)]
tab=tab[match(tr$tip.label,matchtable$generatrefri),]
trst=stickTips(tr,tab,subtree.type="yule")
trst=stickTips(tr,tab,subtree.type="polytomy")
plot(trst)
tab
matchtable=read.delim("matchtable.csv")
tab=data.frame(matchtable$treefri,matchtable$generaftrefri)
View(tab)
tr
match(tr$tip.label,matchtable$generatrefri)
View(tab)
match(tr$tip.label,matchtable.generatrefri)
match(tr$tip.label,tab$matchtable.generatrefri)
match(tr$tip.label,tab$matchtable.generaftrefri)
tab=tab[match(tr$tip.label,tab$matchtable.generaftrefri),]
View(tab)
View(tab)
matchtable=read.delim("matchtable.csv")
tab=data.frame(matchtable$treefri,matchtable$generaftrefri)
trst=stickTips(tr,tab,subtree.type="yule")
trst=stickTips(tr,tab,subtree.type="polytomy")
plot(trst)
trst=stickTips(tr,tab,subtree.type="yule")
plot(trst)
trst=stickTips(tr,tab,subtree.type="brownian",b=0.01)
t=as.phylo(rtreeshape(1, 4, model="yule")[[1]])
t$edge.length
t=as.phylo(rtreeshape(1, 2, model="yule")[[1]])
t$edge.length
100/max(distRoot(t))
runif(1,0,1)
runif(1,0,1)
runif(1,0,1)
stickTips=function(tree, tab , prun=T, subtree.type = "polytomy", b=0.01, d=0, p=0.3, comments=TRUE){
if(!require(ape)) {stop("library ape is needed!\n")}
if(!require(adephylo)) {stop("library adephylo is needed!\n")}
library(ape)
library(adephylo)
tab[,1] <- as.character(tab[,1])
tab[,2] <- as.character(tab[,2])
nochanges <- which(tab[,1]==tab[,2])
if( sum(duplicated(c(unique(tab[-nochanges,1]), unique(tab[-nochanges,2])))) != 0 ) {stop("two tips have the same name!\n")}   # this will avoid the creation of a weird object
#select table names that are not in the tips
outers.tab <- unique(tab[!(tab[,2] %in% tree$tip.label),2])
#warning for these names and removing of the matching lines
if (length(outers.tab)!=0) { warning(paste(outers.tab,"is/are not in the tips of your tree !\n"),call.=FALSE)
tab <- tab[- which((tab[,2] %in% outers.tab)),]
}
#select tips names that are not in the table
outers.tree <- unique(tree$tip.label[!(tree$tip.label %in% tab[,2])])
#warning if the tree contains more names than the table
if (length(outers.tree)!=0) { if(comments==TRUE) warning(paste(outers.tree,"is/are not in your tab !\n"),call.=FALSE)    }
# sticking
for(tip in as.character(unique(tab[,2]))){ #each tip
toStick <- tab[tab[,2]==tip,1]  #new tips list
if(comments==TRUE) print(paste("sticking to : ",as.character(tip)))
#if there is no element, we do nothing (case only if prun=F)
#substitution if only 1 element
if(length(toStick)==1) tree$tip.label[tree$tip.label==tip] <- as.character(toStick[1])
#if several elements
if(length(toStick)>1) {
# depth of the branch:
depth <- tree$edge.length[which.edge(tree,which(tree$tip.label==tip))]
if(subtree.type == "polytomy"){
#shorten the receiver branch
tree$edge.length[which.edge(tree,which(tree$tip.label==tip))] = depth/2
#make the polytomic tree to stick
polytomy <-  as.phylo(~newTip, data=data.frame(newTip=toStick))
subtree = compute.brlen(polytomy,depth/2)
}else {
if(subtree.type=="brownian"){
if(!require(geiger)) {stop("library geiger is needed!\n")}
library(geiger)
# subtree
subtree <- treedata(birthdeath.tree(b, d, taxa.stop=(length(toStick) + 1)), data.frame(rnorm(length(toStick))), warnings=FALSE)$phy
# create tmp to get root length
tmp <- treedata(birthdeath.tree(b, d, taxa.stop=4), data.frame(rnorm(3)), warnings=FALSE)$phy
root.tmp <- which(tmp$edge[,2] == 5)
# shorten the receiver branch
# old: receiv.brlen <- mean(subtree$edge.length) * depth/max(distRoot(subtree))
receiv.brlen <- tmp$edge.length[root.tmp] * depth/(max(distRoot(subtree)) + tmp$edge.length[root.tmp])
}else{
if(!require(apTreeshape)) {stop("library apTreeshape is needed!\n")}
library(apTreeshape)
#make the tree to stick
subtree <- as.phylo(rtreeshape(1, tip.number = length(toStick), model=subtree.type, p=p)[[1]])
#shorten the receiver branch
receiv.brlen <- runif(1,0,depth)
}
#shorten the receiver branch
tree$edge.length[which.edge(tree,which(tree$tip.label==tip))]  <- receiv.brlen
#rescale new branch length
subtree$edge.length <- subtree$edge.length*(depth-receiv.brlen)/max(distRoot(subtree))
# tips names
subtree$tip.label <- toStick
}
#stick the subtree
tree <- bind.tree(tree,subtree, which(tree$tip.label==tip))
}
}
#remove tips that are not in the table
if (prun == TRUE & length(outers.tree)!=0) tree <- drop.tip(tree,outers.tree)
return(tree)
}
trst=stickTips(tr,tab,subtree.type="yule")
plot(trst)
trst=stickTips(tr,tab,subtree.type="yule")
plot(trst)
plot(trst)
trst=stickTips(tr,tab,subtree.type="yule")
plot(trst)
trst=stickTips(tr,tab,subtree.type="yule")
plot(trst)
t=as.phylo(rtreeshape(1, 2, model="yule")[[1]])
t$edge.length
t=as.phylo(rtreeshape(1, 5, model="yule")[[1]])
t$edge.length
plot(t)
t=as.phylo(rtreeshape(1, 50, model="yule")[[1]])
t$edge.length
plot(t)
t=as.phylo(rtreeshape(1, 50, model="yule")[[1]])
t$edge.length
plot(t)
t=as.phylo(rtreeshape(1, 50, model="yule")[[1]])
t$edge.length
plot(t)
t=as.phylo(rtreeshape(1, 50, model="yule")[[1]])
t$edge.length
plot(t)
t=as.phylo(rtreeshape(1, 50, model="yule")[[1]])
t$edge.length
plot(t)
rexp(1,100)
rexp(1,20)
rexp(1,1)
rexp(1,1)
rexp(1,1)
rexp(1,1)
rexp(1,1)
rexp(1,1)
stickTips=function(tree, tab , prun=T, subtree.type = "polytomy", b=0.01, d=0, p=0.3, comments=TRUE){
if(!require(ape)) {stop("library ape is needed!\n")}
if(!require(adephylo)) {stop("library adephylo is needed!\n")}
library(ape)
library(adephylo)
tab[,1] <- as.character(tab[,1])
tab[,2] <- as.character(tab[,2])
nochanges <- which(tab[,1]==tab[,2])
if( sum(duplicated(c(unique(tab[-nochanges,1]), unique(tab[-nochanges,2])))) != 0 ) {stop("two tips have the same name!\n")}   # this will avoid the creation of a weird object
#select table names that are not in the tips
outers.tab <- unique(tab[!(tab[,2] %in% tree$tip.label),2])
#warning for these names and removing of the matching lines
if (length(outers.tab)!=0) { warning(paste(outers.tab,"is/are not in the tips of your tree !\n"),call.=FALSE)
tab <- tab[- which((tab[,2] %in% outers.tab)),]
}
#select tips names that are not in the table
outers.tree <- unique(tree$tip.label[!(tree$tip.label %in% tab[,2])])
#warning if the tree contains more names than the table
if (length(outers.tree)!=0) { if(comments==TRUE) warning(paste(outers.tree,"is/are not in your tab !\n"),call.=FALSE)    }
# sticking
for(tip in as.character(unique(tab[,2]))){ #each tip
toStick <- tab[tab[,2]==tip,1]  #new tips list
if(comments==TRUE) print(paste("sticking to : ",as.character(tip)))
#if there is no element, we do nothing (case only if prun=F)
#substitution if only 1 element
if(length(toStick)==1) tree$tip.label[tree$tip.label==tip] <- as.character(toStick[1])
#if several elements
if(length(toStick)>1) {
# depth of the branch:
depth <- tree$edge.length[which.edge(tree,which(tree$tip.label==tip))]
if(subtree.type == "polytomy"){
#shorten the receiver branch
tree$edge.length[which.edge(tree,which(tree$tip.label==tip))] = depth/2
#make the polytomic tree to stick
polytomy <-  as.phylo(~newTip, data=data.frame(newTip=toStick))
subtree = compute.brlen(polytomy,depth/2)
}else {
if(subtree.type=="brownian"){
if(!require(geiger)) {stop("library geiger is needed!\n")}
library(geiger)
# subtree
subtree <- treedata(birthdeath.tree(b, d, taxa.stop=(length(toStick) + 1)), data.frame(rnorm(length(toStick))), warnings=FALSE)$phy
# create tmp to get root length
tmp <- treedata(birthdeath.tree(b, d, taxa.stop=4), data.frame(rnorm(3)), warnings=FALSE)$phy
root.tmp <- which(tmp$edge[,2] == 5)
# shorten the receiver branch
# old: receiv.brlen <- mean(subtree$edge.length) * depth/max(distRoot(subtree))
receiv.brlen <- tmp$edge.length[root.tmp] * depth/(max(distRoot(subtree)) + tmp$edge.length[root.tmp])
}else{
if(!require(apTreeshape)) {stop("library apTreeshape is needed!\n")}
library(apTreeshape)
#make the tree to stick
subtree <- as.phylo(rtreeshape(1, tip.number = length(toStick), model=subtree.type, p=p)[[1]])
#shorten the receiver branch
receiv.brlen <- depth/(1+max(distRoot(subtree)))
}
#shorten the receiver branch
tree$edge.length[which.edge(tree,which(tree$tip.label==tip))]  <- receiv.brlen
#rescale new branch length
subtree$edge.length <- subtree$edge.length*(depth-receiv.brlen)/max(distRoot(subtree))
# tips names
subtree$tip.label <- toStick
}
#stick the subtree
tree <- bind.tree(tree,subtree, which(tree$tip.label==tip))
}
}
#remove tips that are not in the table
if (prun == TRUE & length(outers.tree)!=0) tree <- drop.tip(tree,outers.tree)
return(tree)
}
trst=stickTips(tr,tab,subtree.type="yule")
plot(trst)
